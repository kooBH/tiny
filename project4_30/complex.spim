# File : complex.spim
# Language : C-
# Area for global Variables

# End of area for global Variables

    .data
nextline:    .asciiz "\n"
    .text
main:
L0  : sub     $fp, $sp, 4
L1  : jal     __main
L2  : li      $v0, 10
L3  : syscall

# Code for void output(int) function
output:
L4  : sub     $sp, $sp, 8
L5  : sw      $fp, 4($sp)
L6  : sw      $ra, 0($sp)
L7  : add     $fp, $sp, 4

L8  : li      $v0, 1
L9  : syscall

L10 : li $v0, 4
L11 : la $a0, nextline
L12 : syscall
L13 : lw      $ra, 0($sp)
L14 : lw      $fp, 4($sp)
L15 : add     $sp, $sp, 8
L16 : jr      $ra

# Code for int input(void) function
input:
L17 : sub     $sp, $sp, 8
L18 : sw      $fp, 4($sp)
L19 : sw      $ra, 0($sp)
L20 : add     $fp, $sp, 4

L21 : li      $v0, 5
L22 : syscall

L23 : lw      $ra, 0($sp)
L24 : lw      $fp, 4($sp)
L25 : add     $sp, $sp, 8
L26 : sub     $sp, $sp, 4
L27 : sw      $v0, 0($sp)
L28 : jr      $ra

f:
# Start of FuncK

L29 : sub     $sp, $sp, 8
L30 : sw      $fp, 4($sp)
L31 : sw      $ra, 0($sp)
L32 : sub     $fp, $sp, 4

# FuncK body start here
# paramK
# paramK
# CompK entry
L33 : sub $sp,$sp,4
# >>ExpK AssignK
# >>ExpK IdK
L34 : lw      $t0,   4($fp)
L35 : sub     $sp, $sp, 4
L36 : sw      $t0, 0($sp)
# <<ExpK IdK
L37 : lw      $t1, 0($sp)
L38 : addi    $sp, $sp, 4
L39 : sw      $t1,  -8($fp)
# <<ExpK AssignK
L40 : lw      $v0, 0($sp)
L41 : addi    $sp, $sp, 4
# RetK
# >>ExpK OpK Plus
# >>ExpK IdK
L42 : lw      $t0,  -8($fp)
L43 : sub     $sp, $sp, 4
L44 : sw      $t0, 0($sp)
# <<ExpK IdK
# >>ExpK IdK
L45 : lw      $t0,   4($fp)
L46 : sub     $sp, $sp, 4
L47 : sw      $t0, 0($sp)
# <<ExpK IdK
L48 : lw      $t1, 0($sp)
L49 : addi    $sp, $sp, 4
L50 : lw      $t0, 0($sp)
L51 : addi    $sp, $sp, 4
L52 : add $t2, $t0, $t1 
L53 : sub     $sp, $sp, 4
L54 : sw      $t2, 0($sp)
# <<ExpK OpK
# FuncK body end here

L55 : lw      $ra, 0($sp)
L56 : lw      $fp, 8($sp)
L57 : sub     $sp, $sp, 8
L58 : jr      $ra
# End of FuncK

__main:
# Start of FuncK

L59 : sub     $sp, $sp, 8
L60 : sw      $fp, 4($sp)
L61 : sw      $ra, 0($sp)
L62 : sub     $fp, $sp, 4

# FuncK body start here
# paramK
# CompK entry
L63 : addi $sp, $sp, -40
L64 : sub $sp,$sp,4
J0  : 
# >>ExpK OpK Plus
# >>ExpK CosntK
L65 : li      $t0, 10 
L66 : sub     $sp, $sp, 4
L67 : sw      $t0, 0($sp)
# <<ExpK CosntK
# >>ExpK IdK
L68 : lw      $t0, -48($fp)
L69 : sub     $sp, $sp, 4
L70 : sw      $t0, 0($sp)
# <<ExpK IdK
L71 : lw      $t1, 0($sp)
L72 : addi    $sp, $sp, 4
L73 : lw      $t0, 0($sp)
L74 : addi    $sp, $sp, 4
L75 : slt $t2, $t0, $t1 
L76 : sub     $sp, $sp, 4
L77 : sw      $t2, 0($sp)
# <<ExpK OpK
L78 : lw      $t0, 0($sp)
L79 : addi    $sp, $sp, 4
L80 : bnez $t0, J1  
# CompK entry
# >>ExpK AssignK
# >>ExpK IdK
L81 : lw      $t0, -48($fp)
L82 : sub     $sp, $sp, 4
L83 : sw      $t0, 0($sp)
# <<ExpK IdK
L84 : lw      $t1, 0($sp)
L85 : addi    $sp, $sp, 4
L86 : sw      $t1, -44($fp)
# <<ExpK AssignK
# >>ExpK IdK
L87 : lw      $t0, -48($fp)
L88 : sub     $sp, $sp, 4
L89 : sw      $t0, 0($sp)
# <<ExpK IdK
# >>ExpK AssignK
# >>ExpK OpK Plus
# >>ExpK CosntK
L90 : li      $t0, 1  
L91 : sub     $sp, $sp, 4
L92 : sw      $t0, 0($sp)
# <<ExpK CosntK
# >>ExpK IdK
L93 : lw      $t0, -48($fp)
L94 : sub     $sp, $sp, 4
L95 : sw      $t0, 0($sp)
# <<ExpK IdK
L96 : lw      $t1, 0($sp)
L97 : addi    $sp, $sp, 4
L98 : lw      $t0, 0($sp)
L99 : addi    $sp, $sp, 4
L100: add $t2, $t0, $t1 
L101: sub     $sp, $sp, 4
L102: sw      $t2, 0($sp)
# <<ExpK OpK
L103: lw      $t1, 0($sp)
L104: addi    $sp, $sp, 4
L105: sw      $t1, -48($fp)
# <<ExpK AssignK
L106: j J0  
J1  : 
# CompK entry
# >>ExpK CosntK
L107: li      $t0, 1  
L108: sub     $sp, $sp, 4
L109: sw      $t0, 0($sp)
# <<ExpK CosntK
# >>ExpK IdK
L110: lw      $t0, -44($fp)
L111: sub     $sp, $sp, 4
L112: sw      $t0, 0($sp)
# <<ExpK IdK
L113: lw      $a0, 0($sp)
L114: addi    $sp, $sp, 4
L115: lw      $a0, 0($sp)
L116: addi    $sp, $sp, 4
L117: jal     f

# Function return here
L118: lw      $a0, 0($sp)
L119: addi    $sp, $sp, 4
L120: jal     output

# Function return here
# FuncK body end here

L121: lw      $ra, 0($sp)
L122: lw      $fp, 8($sp)
L123: sub     $sp, $sp, 8
L124: jr      $ra
# End of FuncK


# End of code.

